// function defs
var identity = (arg1) => (arg1);

//statics
var width = 900,
    barHeight = 20,
    topPadding = 50;

var barName = (data) => {
    console.log("data:", data);
    return (data.key.length > 25) ? (data.key.slice(0, 25) + "...") : data.key;
}

// playground

var drawChart = (data, selectedYear) => {
    console.log("redraw chart1");

    var yearSpecificData = data.filter(a => (a.year === selectedYear));
    console.log("yearSpecificData: ", yearSpecificData);

    var uniqueOriginCountries = d3.nest()
        .key((d) => (d.origin))
        .rollup((v) => (v.length))
        .entries(yearSpecificData).length;

    var originCountryWiseData = d3.nest()
        .key((d) => (d.origin))
        .rollup((countries) =>
            (d3.sum(countries,
                (d) => (d.count)))
        )
        .entries(yearSpecificData);

    console.log("originCountryWiseData: ", originCountryWiseData);

    var height = topPadding + (barHeight + 5) * uniqueOriginCountries;

    var chart1 = d3.select(".svg-chart")
        .attr("width", width)
        .attr("height", height);

    var barChart = chart1.selectAll("g")
        .data(originCountryWiseData)
        .enter().append("g")
        .attr("transform", (d, i) => ("translate(0," + (i * barHeight + topPadding + 5) + ")"));

    var x = d3.scaleLinear()
        .domain([0, d3.max(originCountryWiseData.map(b => b.value))])
        .range([0, width - 200]);

    var normalize = (a) => (x(a.value));

    barChart.append("text")
        .attr("x", 150)
        .attr("y", barHeight / 2)
        .attr("dy", ".35em")
        .attr("text-anchor", "end")
        .attr("style", "font-size: 10px")
        .text(barName);

    barChart.append("rect")
        .attr("x", 170)
        .attr("width", normalize)
        .attr("fill", "#3386FF")
        .attr("height", barHeight - 5);

    var xAxis = d3.axisBottom()
        .scale(x);

    console.log("xAxis: ", height)

    chart1.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(" + 170 + "," +(height-50) + ")")
        .call(xAxis);

    chart1.append("text")
        .attr("y", 25)
        .attr("x", 170)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("# Origin Countries");

    chart1.append("text")
        .attr("y", height-20)
        .attr("x", width-10)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("# Refugees");




};

d3.csv("/data.csv", function(data) {

    var mappedData = data
        .map(d => ({
            year: d["Year"],
            destination: d["Country / territory of asylum/residence"],
            origin: d["Origin"],
            count: Number(d["Total Population"])
        }));

    var years = d3.map(mappedData, a => a.year)
        .keys()
        .map(a => ({
            value: a
        }));

    var selectedYear = years[0].value;

    console.log("years: ", years);

    // Year Dropdown
    var yearDropDown = d3.select("#year-dropdown")
        .append("select")
        .attr("name", "year-list");

    var options = yearDropDown.selectAll("option")
        .data(years)
        .enter()
        .append("option");

    options.text((d) => (d.value))
        .attr("value", (d) => (d.value));

    var menuChanged = function() {
        selectedYear = d3.event.target.value;
        drawChart(mappedData, selectedYear);
        console.log("selectedYear Changed: ", selectedYear);
    };
    yearDropDown.on("change", menuChanged);

    drawChart(mappedData, selectedYear);
});


// var updateFunction = drawChart();
// var container = d3.select("body");

// function update(data) {
//     container.datum(data).call(updateFunction);
// }